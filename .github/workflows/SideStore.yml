name: Fix JSON and Release

on:
  workflow_dispatch:
  schedule:
    - cron: "0 1 * * *"

permissions:
  contents: write

jobs:
  fix-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Download original JSON
        run: curl -s https://aio.zxcvbn.fyi/r/repo.altstore.json -o repo.altstore.json

      - name: Fix JSON (deduplicate versions by version number)
        run: |
          python << 'EOF'
          import json
          from datetime import datetime

          with open("repo.altstore.json", "r", encoding="utf-8") as f:
              data = json.load(f)

          cleaned_apps = []
          for app in data.get("apps", []):
              versions_by_number = {}

              for ver in app.get("versions", []):
                  vnum = ver.get("version")
                  if not vnum:
                      continue

                  current = versions_by_number.get(vnum)
                  if current is None:
                      versions_by_number[vnum] = ver
                  else:
                      # pick the "best" duplicate
                      d1, d2 = ver.get("date"), current.get("date")
                      try:
                          d1 = datetime.fromisoformat(d1) if d1 else datetime.min
                      except Exception:
                          d1 = datetime.min
                      try:
                          d2 = datetime.fromisoformat(d2) if d2 else datetime.min
                      except Exception:
                          d2 = datetime.min

                      if d1 > d2:
                          versions_by_number[vnum] = ver
                      elif d1 == d2:
                          # fallback: keep larger file
                          if ver.get("size", 0) > current.get("size", 0):
                              versions_by_number[vnum] = ver

              # keep only unique versions, sorted by date desc
              unique_versions = list(versions_by_number.values())
              def parse_date(v):
                  d = v.get("date")
                  try:
                      return datetime.fromisoformat(d)
                  except Exception:
                      return datetime.min
              unique_versions.sort(key=parse_date, reverse=True)

              app["versions"] = unique_versions
              cleaned_apps.append(app)

          data["apps"] = cleaned_apps

          with open("repo.fixed.json", "w", encoding="utf-8") as f:
              json.dump(data, f, indent=2, ensure_ascii=False)

          print(f"Cleaned {len(data['apps'])} apps successfully.")
          EOF
          
      - name: Commit fixed JSON to repository
        run: |
          cp repo.fixed.json repo.altstore.json
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add repo.altstore.json
          git commit -m "chore: update fixed repo.altstore.json" || echo "No changes to commit"
          git push

      - name: Upload fixed JSON to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest-fixed"
          name: "Latest Fixed JSON"
          body: "Cleaned and valid repo JSON for SideStore."
          files: repo.fixed.json
          overwrite_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
